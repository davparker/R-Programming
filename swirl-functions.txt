
R version 3.5.1 (2018-07-02) -- "Feather Spray"
Copyright (C) 2018 The R Foundation for Statistical Computing
Platform: x86_64-w64-mingw32/x64 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library(swirl)
Error in library(swirl) : there is no package called ‘swirl’
> install.packages(swirl)
Error in install.packages : object 'swirl' not found
> install.packages("swirl")
also installing the dependencies ‘stringi’, ‘praise’, ‘bitops’, ‘stringr’, ‘testthat’, ‘yaml’, ‘RCurl’

trying URL 'https://cran.rstudio.com/bin/windows/contrib/3.5/stringi_1.2.4.zip'
Content type 'application/zip' length 15268347 bytes (14.6 MB)
downloaded 14.6 MB

trying URL 'https://cran.rstudio.com/bin/windows/contrib/3.5/praise_1.0.0.zip'
Content type 'application/zip' length 19476 bytes (19 KB)
downloaded 19 KB

trying URL 'https://cran.rstudio.com/bin/windows/contrib/3.5/bitops_1.0-6.zip'
Content type 'application/zip' length 38625 bytes (37 KB)
downloaded 37 KB

trying URL 'https://cran.rstudio.com/bin/windows/contrib/3.5/stringr_1.3.1.zip'
Content type 'application/zip' length 194676 bytes (190 KB)
downloaded 190 KB

trying URL 'https://cran.rstudio.com/bin/windows/contrib/3.5/testthat_2.0.1.zip'
Content type 'application/zip' length 1691521 bytes (1.6 MB)
downloaded 1.6 MB

trying URL 'https://cran.rstudio.com/bin/windows/contrib/3.5/yaml_2.2.0.zip'
Content type 'application/zip' length 203553 bytes (198 KB)
downloaded 198 KB

trying URL 'https://cran.rstudio.com/bin/windows/contrib/3.5/RCurl_1.95-4.11.zip'
Content type 'application/zip' length 2969207 bytes (2.8 MB)
downloaded 2.8 MB

trying URL 'https://cran.rstudio.com/bin/windows/contrib/3.5/swirl_2.4.3.zip'
Content type 'application/zip' length 344308 bytes (336 KB)
downloaded 336 KB

package ‘stringi’ successfully unpacked and MD5 sums checked
package ‘praise’ successfully unpacked and MD5 sums checked
package ‘bitops’ successfully unpacked and MD5 sums checked
package ‘stringr’ successfully unpacked and MD5 sums checked
package ‘testthat’ successfully unpacked and MD5 sums checked
package ‘yaml’ successfully unpacked and MD5 sums checked
package ‘RCurl’ successfully unpacked and MD5 sums checked
package ‘swirl’ successfully unpacked and MD5 sums checked

The downloaded binary packages are in
	C:\Users\davpa\AppData\Local\Temp\Rtmpi6Yqfe\downloaded_packages
> library(swirl)

| Hi! Type swirl() when you are ready to begin.

> swirl()

| Welcome to swirl! Please sign in. If you've been here before, use the same
| name as you did then. If you are new, call yourself something unique.

What shall I call you? David

| Thanks, David. Let's cover a couple of quick housekeeping items before we
| begin our first lesson. First of all, you should know that when you see
| '...', that means you should press Enter when you are done reading and ready
| to continue.

...  <-- That's your cue to press Enter to continue

| Also, when you see 'ANSWER:', the R prompt (>), or when you are asked to
| select from a list, that means it's your turn to enter a response, then press
| Enter to continue.

Select 1, 2, or 3 and press Enter 

1: Continue.
2: Proceed.
3: Let's get going!

Selection: 3

| You can exit swirl and return to the R prompt (>) at any time by pressing the
| Esc key. If you are already at the prompt, type bye() to exit and save your
| progress. When you exit properly, you'll see a short message letting you know
| you've done so.

| When you are at the R prompt (>):
| -- Typing skip() allows you to skip the current question.
| -- Typing play() lets you experiment with R on your own; swirl will ignore
| what you do...
| -- UNTIL you type nxt() which will regain swirl's attention.
| -- Typing bye() causes swirl to exit. Your progress will be saved.
| -- Typing main() returns you to swirl's main menu.
| -- Typing info() displays these options again.

| Let's get started!

...

| To begin, you must install a course. I can install a course for you from the
| internet, or I can send you to a web page
| (https://github.com/swirldev/swirl_courses) which will provide course options
| and directions for installing courses yourself. (If you are not connected to
| the internet, type 0 to exit.)

1: R Programming: The basics of programming in R
2: Regression Models: The basics of regression modeling in R
3: Statistical Inference: The basics of statistical inference in R
4: Exploratory Data Analysis: The basics of exploring data in R
5: Don't install anything for me. I'll do it myself.

Selection: 1
  |======================================================================| 100%

| Course installed successfully!


| Please choose a course, or type 0 to exit swirl.

1: R Programming
2: Take me to the swirl course repository!

Selection: 1

| Please choose a lesson, or type 0 to return to course menu.

 1: Basic Building Blocks      2: Workspace and Files     
 3: Sequences of Numbers       4: Vectors                 
 5: Missing Values             6: Subsetting Vectors      
 7: Matrices and Data Frames   8: Logic                   
 9: Functions                 10: lapply and sapply       
11: vapply and tapply         12: Looking at Data         
13: Simulation                14: Dates and Times         
15: Base Graphics             

Selection: 9

  |                                                                      |   0%

| Functions are one of the fundamental building blocks of the R language. They
| are small pieces of reusable code that can be treated like any other R
| object.

...

  |=                                                                     |   2%
| If you've worked through any other part of this course, you've probably used
| some functions already. Functions are usually characterized by the name of
| the function followed by parentheses.

...

  |===                                                                   |   4%
| Let's try using a few basic functions just for fun. The Sys.Date() function
| returns a string representing today's date. Type Sys.Date() below and see
| what happens.

> Sys.Date()
[1] "2018-12-14"

| That's the answer I was looking for.

  |====                                                                  |   6%
| Most functions in R return a value. Functions like Sys.Date() return a value
| based on your computer's environment, while other functions manipulate input
| data in order to compute a return value.

...

  |======                                                                |   8%
| The mean() function takes a vector of numbers as input, and returns the
| average of all of the numbers in the input vector. Inputs to functions are
| often called arguments. Providing arguments to a function is also sometimes
| called passing arguments to that function. Arguments you want to pass to a
| function go inside the function's parentheses. Try passing the argument c(2,
| 4, 5) to the mean() function.

> mean(c(2, 4, 5))
[1] 3.666667

| Your dedication is inspiring!

  |=======                                                               |  10%
| Functions usually take arguments which are variables that the function operates
| on. For example, the mean() function takes a vector as an argument, like in the
| case of mean(c(2,6,8)). The mean() function then adds up all of the numbers in
| the vector and divides that sum by the length of the vector.

...

  |=========                                                             |  12%
| In the following question you will be asked to modify a script that will appear
| as soon as you move on from this question. When you have finished modifying the
| script, save your changes to the script and type submit() and the script will
| be evaluated. There will be some comments in the script that opens up, so be
| sure to read them!

...

  |==========                                                            |  14%
| The last R expression to be evaluated in a function will become the return
| value of that function. We want this function to take one argument, x, and
| return x without modifying it. Delete the pound sign so that x is returned
| without any modification. Make sure to save your script before you type
| submit().

> submit()

| Sourcing your script...


| All that practice is paying off!

  |===========                                                           |  16%
| Now that you've created your first function let's test it! Type:
| boring_function('My first function!'). If your function works, it should just
| return the string: 'My first function!'

> boring_function("My first function!")
[1] "My first function!"

| All that practice is paying off!

  |=============                                                         |  18%
| Congratulations on writing your first function. By writing functions, you can
| gain serious insight into how R works. As John Chambers, the creator of R once
| said:
| 
| To understand computations in R, two slogans are helpful: 1. Everything that
| exists is an object. 2. Everything that happens is a function call.

...

  |==============                                                        |  20%
| If you want to see the source code for any function, just type the function
| name without any arguments or parentheses. Let's try this out with the function
| you just created. Type: boring_function to view its source code.

> boring_function()
Error in boring_function() : argument "x" is missing, with no default
> boring_function
function(x) {
  x
}
<bytecode: 0x000000001405edf0>

| You got it right!

  |================                                                      |  22%
| Time to make a more useful function! We're going to replicate the functionality
| of the mean() function by creating a function called: my_mean(). Remember that
| to calculate the average of all of the numbers in a vector you find the sum of
| all the numbers in the vector, and then divide that sum by the number of
| numbers in the vector.

...

  |=================                                                     |  24%
| Make sure to save your script before you type submit().

> submit()

| Sourcing your script...


| Your dedication is inspiring!

  |===================                                                   |  27%
| Now test out your my_mean() function by finding the mean of the vector c(4, 5,
| 10).

> my_mean(c(4, 5, 10))
[1] 6.333333

| Nice work!

  |====================                                                  |  29%
| Next, let's try writing a function with default arguments. You can set default
| values for a function's arguments, and this can be useful if you think someone
| who uses your function will set a certain argument to the same value most of
| the time.

...

  |=====================                                                 |  31%
| Make sure to save your script before you type submit().

> submit()

| Sourcing your script...


| You're the best!

  |=======================                                               |  33%
| Let's do some testing of the remainder function. Run remainder(5) and see what
| happens.

> remainder(5)
[1] 1

| Perseverance, that's the answer.

  |========================                                              |  35%
| Let's take a moment to examine what just happened. You provided one argument to
| the function, and R matched that argument to 'num' since 'num' is the first
| argument. The default value for 'divisor' is 2, so the function used the
| default value you provided.

...

  |==========================                                            |  37%
| Now let's test the remainder function by providing two arguments. Type:
| remainder(11, 5) and let's see what happens.

> remainder(11, 5)
[1] 1

| You got it right!

  |===========================                                           |  39%
| Once again, the arguments have been matched appropriately.

...

  |=============================                                         |  41%
| You can also explicitly specify arguments in a function. When you explicitly
| designate argument values by name, the ordering of the arguments becomes
| unimportant. You can try this out by typing: remainder(divisor = 11, num = 5).

> remainder(divisor = 11, num = 5)
[1] 5

| You got it right!

  |==============================                                        |  43%
| As you can see, there is a significant difference between remainder(11, 5) and
| remainder(divisor = 11, num = 5)!

...

  |===============================                                       |  45%
| R can also partially match arguments. Try typing remainder(4, div = 2) to see
| this feature in action.

> remainder(4, div = 2)
[1] 0

| That's the answer I was looking for.

  |=================================                                     |  47%
| A word of warning: in general you want to make your code as easy to understand
| as possible. Switching around the orders of arguments by specifying their names
| or only using partial argument names can be confusing, so use these features
| with caution!

...

  |==================================                                    |  49%
| With all of this talk about arguments, you may be wondering if there is a way
| you can see a function's arguments (besides looking at the documentation).
| Thankfully, you can use the args() function! Type: args(remainder) to examine
| the arguments for the remainder function.

> args(remainder)
function (num, divisor = 2) 
NULL

| You nailed it! Good job!

  |====================================                                  |  51%
| You may not realize it but I just tricked you into doing something pretty
| interesting! args() is a function, remainder() is a function, yet remainder was
| an argument for args(). Yes it's true: you can pass functions as arguments!
| This is a very powerful concept. Let's write a script to see how it works.

...

  |=====================================                                 |  53%
| Make sure to save your script before you type submit().

> subbmit()
Error in subbmit() : could not find function "subbmit"
> submit()

| Sourcing your script...


| That's not the answer I was looking for, but try again.

| Make sure that when you pass a function as an argument you pass the name of the
| function without parentheses!

> submit()

| Sourcing your script...


| Great job!

  |=======================================                               |  55%
| Let's take your new evaluate() function for a spin! Use evaluate to find the
| standard deviation of the vector c(1.4, 3.6, 7.9, 8.8).

> evaluate(sd, c(1.4, 3.6, 7.9, 8.8))
[1] 3.514138

| Perseverance, that's the answer.

  |========================================                              |  57%
| The idea of passing functions as arguments to other functions is an important
| and fundamental concept in programming.

...

  |=========================================                             |  59%
| You may be surprised to learn that you can pass a function as an argument
| without first defining the passed function. Functions that are not named are
| appropriately known as anonymous functions.

...

  |===========================================                           |  61%
| Let's use the evaluate function to explore how anonymous functions work. For
| the first argument of the evaluate function we're going to write a tiny
| function that fits on one line. In the second argument we'll pass some data to
| the tiny anonymous function in the first argument.

...

  |============================================                          |  63%
| Type the following command and then we'll discuss how it works:
| evaluate(function(x){x+1}, 6)

> evaluate(function(x){x+1}, 6)
[1] 7

| You got it right!

  |==============================================                        |  65%
| The first argument is a tiny anonymous function that takes one argument `x` and
| returns `x+1`. We passed the number 6 into this function so the entire
| expression evaluates to 7.

...

  |===============================================                       |  67%
| Try using evaluate() along with an anonymous function to return the first
| element of the vector c(8, 4, 0). Your anonymous function should only take one
| argument which should be a variable `x`.

> evaluate(function(x){x[1]}, c(8, 4, 0))
[1] 8

| Excellent work!

  |=================================================                     |  69%
| Now try using evaluate() along with an anonymous function to return the last
| element of the vector c(8, 4, 0). Your anonymous function should only take one
| argument which should be a variable `x`.

> evaluate(function(x){x[3]}, c(8, 4, 0))
[1] 0

| Nice try, but that's not exactly what I was hoping for. Try again. Or, type
| info() for more options.

| You may need to recall how to index vector elements. Remember that your
| anonymous function should only have one argument, and that argument should be
| named `x`. Using the length() function in your anonymous function may help you.

> evaluate(function(x){x[length(x)]}, c(8, 4, 0))
[1] 0

| Excellent work!

  |==================================================                    |  71%
| For the rest of the course we're going to use the paste() function frequently.
| Type ?paste so we can take a look at the documentation for the paste function.

> ?paste

| You are amazing!

  |===================================================                   |  73%
| As you can see the first argument of paste() is `...` which is referred to as an ellipsis or simply
| dot-dot-dot. The ellipsis allows an indefinite number of arguments to be passed into a function. In
| the case of paste() any number of strings can be passed as arguments and paste() will return all of
| the strings combined into one string.

...

  |=====================================================                 |  76%
| Just to see how paste() works, type paste("Programming", "is", "fun!")

> paste("Programming", "is", "fun!")
[1] "Programming is fun!"

| You nailed it! Good job!

  |======================================================                |  78%
| Time to write our own modified version of paste().

...

  |========================================================              |  80%
| Make sure to save your script before you type submit().

> submit()

| Sourcing your script...


| You are really on a roll!

  |=========================================================             |  82%
| Now let's test out your telegram function. Use your new telegram function passing in whatever
| arguments you wish!

> telegram("This is the end!")
[1] "START This is the end! STOP"

| You are doing so well!

  |===========================================================           |  84%
| Make sure to save your script before you type submit().

> submit()

| Sourcing your script...


| You almost had it, but not quite. Try again.

| Your function should have three sections: capture the ellipsis in a list(), unpack the arguments from
| the ellipsis and assign them to variables, then pass those variables to paste().

> submit()

| Sourcing your script...


| Give it another try.

| Your function should have three sections: capture the ellipsis in a list(), unpack the arguments from
| the ellipsis and assign them to variables, then pass those variables to paste().

> submit()

| Sourcing your script...


| Nice try, but that's not exactly what I was hoping for. Try again.

| Your function should have three sections: capture the ellipsis in a list(), unpack the arguments from
| the ellipsis and assign them to variables, then pass those variables to paste().

> submit()

| Sourcing your script...


| One more time. You can do it!

| Your function should have three sections: capture the ellipsis in a list(), unpack the arguments from
| the ellipsis and assign them to variables, then pass those variables to paste().

> submit()

| Sourcing your script...


| All that hard work is paying off!

  |============================================================          |  86%
| Time to use your mad_libs function. Make sure to name the place, adjective, and noun arguments in
| order for your function to work.

> mad_libs("San Diego", "wild", "Trump statue")
[1] "News from San Diego today where wild students took to the streets in protest of the new Trump statue being installed on campus."

| That's the answer I was looking for.

  |=============================================================         |  88%
| We're coming to the end of this lesson, but there's still one more idea you should be made aware of.

...

  |===============================================================       |  90%
| You're familiar with adding, subtracting, multiplying, and dividing numbers in R. To do this you use
| the +, -, *, and / symbols. These symbols are called binary operators because they take two inputs,
| an input from the left and an input from the right.

...

  |================================================================      |  92%
| In R you can define your own binary operators. In the next script I'll show you how.

...

  |==================================================================    |  94%
| Make sure to save your script before you type submit().

> submit()

| Sourcing your script...


| You're the best!

  |===================================================================   |  96%
| You made your own binary operator! Let's test it out. Paste together the strings: 'I', 'love', 'R!'
| using your new binary operator.

> I %p% love %p% R!
Error: unexpected '!' in "I %p% love %p% R!"
> "I" %p% "love, R!"
[1] "I love, R!"

| Not quite! Try again. Or, type info() for more options.

| Use %p% in between each string.

> "I" %p% "love," %p% "R!"
[1] "I love, R!"

| You almost had it, but not quite. Try again. Or, type info() for more options.

| Use %p% in between each string.

> "I " %p% "love, " %p% "R!"
[1] "I  love,  R!"

| One more time. You can do it! Or, type info() for more options.

| Use %p% in between each string.

> "I," %p% "love," %p% "R!"
[1] "I, love, R!"

| That's not exactly what I'm looking for. Try again. Or, type info() for more options.

| Use %p% in between each string.

> "I" %p% "love" %p% "R!"
[1] "I love R!"

| That's the answer I was looking for.

  |===================================================================== |  98%
| We've come to the end of our lesson! Go out there and write some great functions!